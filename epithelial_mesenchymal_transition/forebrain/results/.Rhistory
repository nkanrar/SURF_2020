x <- c(1,2,3); x
myMA <- matrix(1:30, 3, 10, byrow = TRUE)
class(myMA) [1]
myMA[1:2,]
myDF <- data.frame(Col1=1:10, Col2=10:1)
myDF[1:2,]
dim(myDF)
myL <- list(name="Fred", wife="Mary", no.children=3, child.ages=c(4,7,9))
myL
myL$name
myL[[4]][1:2]
myVec <- 1:26; names(myVec) <- LETTERS
myVec[1:4]
myLog <- myVec > 10
myVec[myLog]
myVec[c("B", "K", "M")]
iris$Species[1:8]
1==1
x <- 1:5; y <- 5:1
x>y&x>3
x+y
sum(x)
mean(x)
c(1,2,3)
x<-1:3;y<-51:53
c(x,y)
ma <- cbind(x,y)
ma
dim(ma)
class(ma)
rbind(ma,ma)
history() # display last 25 commands
history(max.show=Inf) # display all previous commands
savehistory(file="myfile") # default is ".Rhistory"
getwd()
dir()
install.packages("ggplot2")
ls(pos = "package:ggplot2")
library(ggplot2)
ls(pos = "package:ggplot2")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
browseVignettes("DESeq2")
dim(iris)
iris[1,]
iris[1:5,]
class(iris)
names(iris)
length(iris$Sepal.Length)
levels(iris$Species)
iris$Species[1:8]
length(unique(iris$Sepal.Length))
names(iris) %in% c("Species","Petal.Width")
names(iris)
which(names(iris)) %in% c("Species", "Petal.Width")
which(names(iris) %in% c("Species", "Petal.Width"))
iris[which(names(iris) %in% c("Species", "Petal.Width"))]
month.name %in% c("May", "July")
table(iris$Species)
frame1 <- iris[sample(1:length(iris[,1]), 30), ]
frame1[1:2,]
dim(frame1) [1]
write.table(iris, file="myData.xls",sep="\t", quote=FALSE, col.names=NA)
myDF <- read.delim("myData.xls", sep="\t")
for(year in 2010:2015{
print(paste("The year is",year))
})
for(year in 2010:2015){
print(paste("The year is",year))
}
words.names = function(x) {
for(name in x){
print(name)
}
}
words = c("R", "datascience", "machinelearning","algorithms","AI")
words.names(words)
bar <- barplot(m <- rowMeans(y) * 10, ylim=c(0, 10))
set.seed(1410)
y <- matrix(runif(30), ncol=3, dimnames=list(letters[1:10], LETTERS[1:3]))
plot(y[,1], y[,2])
bar <- barplot(m <- rowMeans(y) * 10, ylim=c(0, 10))
stdev <- sd(t(y))
arrows(bar, m, bar, m + stdev, length=0.15, angle = 90)
hist(y, freq=TRUE, breaks=10)
bar <- barplot(m <- rowMeans(y) * 10, ylim=c(0, 10))
stdev <- sd(t(y))
arrows(bar, m, bar, m + stdev, length=0.15, angle = 90)
hist(y, freq=TRUE, breaks=10)
install.packages("ggplot2")
jpeg('rplot.jpg')
plot(x,y)
dev.off()
pdf("save_plot.pdf")
hist(y, freq=TRUE, breaks=10)
dev.off()
source("https://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
biocLite("rtracklayer")
library(GenomicRanges)
library(rtracklayer)
library(GenomicRanges); library(rtracklayer)
gr <- GRanges(seqnames = Rle(c("chr1", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)), ranges = IRanges(1:10, end = 7:16, names = head(letters, 10)), strand = Rle(strand(c("-", "+", "*", "+", "-")), c(1, 2, 2, 3, 2)), score = 1:10, GC = seq(1, 0, length = 10)) # Example of creating a GRanges object with its constructor function.
gff <- import.gff("http://faculty.ucr.edu/~tgirke/Documents/R_BioCond/Samples/gff3.gff") # Imports a simplified GFF3 genome annotation file.
seqlengths(gff) <- end(ranges(gff[which(values(gff)[,"type"]=="chromosome"),])); names(gff) <- 1:length(gff) # Assigns names to corresponding slot gff[1:4,]
x <- c(1,2,3); x
x <- c(1,2,3); x
x <- 1:6 < 5
which(x)
myVec <- 1:10; names(myVec) <- letters[1:10]
myVec[1:5]
myMA <- matrix(1:30, 3, 10, byrow = TRUE)
class(myMA) [1]
myMA[1:2,]
myDF <- data.frame(Col1=1:10, Col2=10:1)
myDF[1:2,]
dim(myDF)
myL <- list(name="Fred", wife="Mary", no.children=3, child.ages=c(4,7,9))
myL
myL$name
myL[[4]][1:2]
myVec <- 1:26; names(myVec) <- LETTERS
myVec[1:4]
myLog <- myVec > 10
myVec[myLog]
myVec[c("B", "K", "M")]
1==1
x <- 1:5; y <- 5:1
x>y&x>3
x+y
sum(x)
mean(x)
c(1,2,3)
x<-1:3;y<-51:53
c(x,y)
ma <- cbind(x,y)
ma
rbind(ma,ma)
?function_name
function_name
?plot
plot
vignette("my_library")
history() # display last 25 commands
history(max.show=Inf) # display all previous commands
getwd()
dir()
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ls("package:ggplot2")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
browseVignettes("DESeq2")
class(iris)
dim(iris)
names(iris)
iris[1,]
levels(iris$Species)
length(unique(iris$Sepal.Length))
names(iris) %in% c("Species","Petal.Width")
month.name %in% c("May", "July")
table(iris$Species)
write.table(iris, file="myData.xls",sep="\t", quote=FALSE, col.names=NA)
myDF <- read.delim("myData.xls", sep="\t")
my.DF[1,]
myDF[1,]
for(year in 2010:2015){
print(paste("The year is",year))
}
words.names = function(x) {
for(name in x){
print(name)
}
}
words = c("R", "datascience", "machinelearning","algorithms","AI")
words.names(words)
1:5
x <- "R Tutorial"
gsub("ut","ot",x)
str = 'Now is the time '
sub(' +$', '', str) ## spaces only
set.seed(1410)
y <- matrix(runif(30), ncol=3, dimnames=list(letters[1:10], LETTERS[1:3]))
plot(y[,1], y[,2])
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS", xlab="Number of Gears", col=c("darkblue","red"),legend = rownames(counts))
bar <- barplot(m <- rowMeans(y) * 10, ylim=c(0, 10))
stdev <- sd(t(y))
arrows(bar, m, bar, m + stdev, length=0.15, angle = 90)
hist(y, freq=TRUE, breaks=10)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
df.team_data <- expand.grid(teams = c("Team A", "Team B", "Team C", "Team D")
,metrics = c("Metric 1", "Metric 2", "Metric 3", "Metric 4", "Metric 5")
)
set.seed(41)
df.team_data$performance <- rnorm(nrow(df.team_data))
head(df.team_data)
ggplot(data = df.team_data, aes(x = metrics, y = teams)) +
geom_tile(aes(fill = performance))
jpeg('rplot.jpg')
plot(x,y)
dev.off()
pdf("save_plot.pdf")
hist(y, freq=TRUE, breaks=10)
dev.off()
sessionInfo()
biocLite("BiocStyle")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocStyle")
library(rmarkdown)
library(knitr)
biocLite("GenomicRanges")
biocLite("rtracklayer")
library(GenomicRanges)
library(rtracklayer)
library(GenomicRanges); library(rtracklayer)
gr <- GRanges(seqnames = Rle(c("chr1", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)), ranges = IRanges(1:10, end = 7:16, names = head(letters, 10)), strand = Rle(strand(c("-", "+", "*", "+", "-")), c(1, 2, 2, 3, 2)), score = 1:10, GC = seq(1, 0, length = 10)) # Example of creating a GRanges object with its constructor function.
gff <- import.gff("http://faculty.ucr.edu/~tgirke/Documents/R_BioCond/Samples/gff3.gff") # Imports a simplified GFF3 genome annotation file.
seqlengths(gff) <- end(ranges(gff[which(values(gff)[,"type"]=="chromosome"),])); names(gff) <- 1:length(gff) # Assigns names to corresponding slot gff[1:4,]
as.data.frame(gff)[1:4, 1:7]
gff_rd <- as(gff, "RangedData")
gff_gr <- as(gff_rd, "GRanges")
gff[1:4]
gff[1:4, c("type", "ID")]
strand(gff)
seqlengths(gff)
start(gff[1:4])
end(gff[1:4])
width(gff[1:4])
seqnames(gff)
ranges(gff)
values(gff)
q()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("slingshot")
browseVignettes("slingshot")
library(slingshot)
?slingshot
?slingshot
?slingshot
setwd("~/Documents/SURF 2020/RNA_seq_files/epithelial_mesenchymal_transition/forebrain/results")
library(slingshot)
setwd("~/Documents/SURF 2020/SURF_2020/SURF_2020/epithelial_mesenchymal_transition/forebrain/results")
library(slingshot)
setwd("~/Documents/SURF 2020/SURF_2020/SURF_2020/epithelial_mesenchymal_transition/forebrain/results")
library(scales)
library(viridis)
df <- read.csv("forebrain_slingshot_data.csv", header=TRUE, row.names="X")
